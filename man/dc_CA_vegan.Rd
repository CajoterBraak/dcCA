% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dc_CA_vegan.r
\name{dc_CA_vegan}
\alias{dc_CA_vegan}
\title{Performs a vegan-based double constrained correspondence Analysis (dc-CA)}
\usage{
dc_CA_vegan(
  formulaEnv = ~.,
  formulaTraits = ~.,
  response = NULL,
  dataEnv,
  dataTraits = NULL,
  dc_CA_vegan_object = NULL,
  verbose = TRUE
)
}
\arguments{
\item{formulaEnv}{formula or one-sided formula for the rows (samples) with row predictors in \code{dataEnv}.
When two-sided, the left hand side of the formula is not used. Specify row covariates (if any ) by adding \code{+ Condition(covariate-formula)}
to \code{formulaEnv} as in \code{\link[vegan]{rda}}. Default: \code{~.}, i.e. all variables in \code{dataEnv} are predictor variables.}

\item{formulaTraits}{formula or one-sided formula for the columns (species) with colum predictors in \code{dataTraits}.
When two-sided, the left hand side of the formula is not used. Specify column covariates (if any ) by  adding \code{+ Condition(covariate-formula)}
to \code{formulaTraits} as in \code{\link[vegan]{cca}}.Default: \code{~.}, i.e. all variables in \code{dataTraits} are predictor traits.}

\item{response}{matrix or data frame of the abundance data (dimension \emph{n} x \emph{m}).
Rownames of \code{response}, if any, are carried through.}

\item{dataEnv}{matrix or data frame of the row predictors, with rows corresponding to those in \code{response}.
((dimension \emph{n} x \emph{p}).}

\item{dataTraits}{matrix or data frame of the column predictors,
with rows corresponding to the columns in \code{response}.((dimension \emph{m} x \emph{q}).}

\item{dc_CA_vegan_object}{optional object from an earlier run of this function. Useful if the
same formula for the columns (\code{formulaTraits}), \code{dataTraits} and \code{response} are used
with a new formula for the rows. If set, the data of the previous run is used and the result of its first step
is taken for the new analysis.}

\item{verbose}{logical for printing a simple summary (default: TRUE)}
}
\value{
A list of \code{class} \code{dccav}; that is a list with elements
\describe{
\item{CCAonTraits}{a \code{\link[vegan]{cca.object}} from the \code{\link[vegan]{cca}} analysis
of the transpose of the closed \code{response} using formula \code{formulaTraits}. }
\item{formalaTraits}{the argument \code{formulaTraits}. }
\item{data}{a list of \code{Y} (response data after removing empty rows and columns and after closure)
and \code{dataEnv} and \code{dataTraits}.}
\item{weights}{a list of unit-sum weights of row and columns.
The names of the list are \code{c("row","columns")}, in that order.}
\item{Nobs}{number of sites (rows).}
\item{RDAonEnv}{a \code{\link[vegan]{cca.object}} from the \code{\link[vegan]{rda}} analysis
of the column scores of the \code{cca}, which are the CWMs of orthonormalized traits,
using formula \code{formulaEnv}. }
\item{formalaEnv}{the argument \code{formulaEnv}. }
\item{eigenvalues}{the dc-CA eigenvalues (same as those of the \code{\link[vegan]{rda}} analysis)}
\item{inertia}{a vector with four inertias (weighted variances):
\itemize{
\item total: the total inertia.
\item conditionT: the inertia explained by the condition in \code{formulaTraits} (neglecting row constraints).
\item traits_explain: the inertia explained by the traits (neglecting the row predictors and any
condition in \code{formulaTraits}).
This is the maximum that the row predictors could explain in dc-CA
(the sum of the following two items is thus less than this value).
\item conditionE: the trait-constrained inertia explained by the condition in \code{formulaEnv}.
\item constraintsTE: the trait-constrained inertia explained by the predictors (without the row covariates).
}
 }
}
If \code{verbose} is \code{TRUE} (or after \code{out <-print(out)} is invoked )
there are three more items (in this version).
\itemize{
\item \code{c_traits_normed}: mean, sd, VIF and (regression) coefficients of
 the traits that define the dc-CA trait axes (composite traits), and their optimistic t-ratio.
\item \code{c_env_normed}:  mean, sd, VIF and (regression) coefficients of the environmental variables that define the dc-CA axes
 in terms of the environmental variables (composite gradients), and their optimistic t-ratio.
\item \code{species_axes}: a list with four items
 \itemize{
 \item \code{species_scores}: a list with names \code{c("species_scores_unconstrained", "lc_traits_scores")} with the
 matrix with species niche centroids along the dc-CA axes (composite gradients) and
 the matrix with linear combinations of traits.
 \item \code{correlation}: a matrix with inter-set correlations of the traits with their SNCs.
 \item \code{b_se}: a matrix with (unstandardized) regression coefficients for traits and their optimistic standard errors.
 \item \code{R2_traits}: a vector with coefficient of determination (R2) of the SNCs on to the traits.
 The square-root thereof could be called the species-trait correlation in analogy with
 the species-environment correlation in CCA.
 }
 \item \code{sites_axes}: a list with four items
 \itemize{
 \item \code{site_scores}: a list with names \code{c("site_scores_unconstrained", "lc_env_scores")} with the
 matrix with community weighted means (CWMs) along the dc-CA axes (composite gradients) and
 the matrix with linear combinations of environmental variables.
 \item \code{correlation}: a matrix with inter-set correlations of the environmental variables with their CWMs.
 \item \code{b_se}: a matrix with (unstandardized) regression coefficients for environmental
 variables and their optimistic standard errors.
 \item \code{R2_env}: a vector with coefficient of determination (R2) of the CWMs on to the environmental variables.
 The square-root thereof has been called the species-environmental correlation in CCA.
 }

}
All scores in the \code{dccav} object
are in scaling \code{"sites"} (1): the scaling with \emph{Focus on Case distances} .
}
\description{
\code{dcCA-vegan} performs double constained correspondence analysis (dc-CA) by
the two-step algorithm of ter Braak et al. (2018). This algorithm
combines and extends community- (sample-) and species-level analyses.
The first step uses \code{\link[vegan]{cca}} (Oksanen et al. 2022)
to regress the transposed abundance data on to the traits
and \code{\link[vegan]{rda}} to regress the community-weighted means (CWMs)
of the ortho-normalized traits on to the environmental predictors.
In this \code{vegan}-based version, the abundance data are divided by the sample total,
i.e. 'closed' in the terminology of compositional data analysis (CoDa). This
has the advantage that the results of a dc-CA correspond with unweighted (multi-trait)
community-level analyses, instead of corresponding to a weighted analysis (dc-CA weighs the
rows by the sample total, which is 1 after closure).
The current vegan-based analysis is efficient for community-level (site-based) permutation tests
but a factor 20 or so slower for species-level permutation tests.
}
\details{
Empty (all zero) rows and columns in \code{response} are removed from the \code{response} and the corresponding
rows from \code{dataEnv} and \code{dataTraits}. Subsequently, any columns with missing values
are removed from  \code{dataEnv} and \code{dataTraits}. It gives an error (object 'name_of_variable' not found),
if variables with missing entries are specified in \code{formulaEnv} and \code{formulaTraits}.
After 'closure' (division of the values in \code{response}
by their row sums), the subsequent algorithm follows the two-step algorithm of ter Braak et al. (2018).
and consits of two steps. First, the transpose of the \code{response} is regressed on to the traits
(the column predictors) using \code{\link[vegan]{cca}}
with \code{formulaTraits}.
The column scores of this analysis (in scaling 1) are community weigthed means (CWM) of the
orthonormalized traits.
These are then regressed on the environmental (row) predictors using \code{\link[vegan]{rda}} with
with \code{formulaEnv}.

 All row based (sample-based) subsequent analyses, sample scores and permutation tests
can be obtained by the appropriate functions with argument \code{object$RDAonEnv}.

The reason for the closure are
two-fold: dc-CA is the efficient summary of CWM-based regression analyses, which are rarely weighted, and
\code{vegan} \code{\link[vegan]{rda}} cannot do a weighted analysis, whereas \code{\link[vegan]{cca}} uses
the weights implied by the \code{response} after closure.

The statistics and scores in the example \code{dune_dcCA.r},
 have been checked against the results in Canoco 5.15 (ter Braak & Smilauer, 1918).

In the current implementation, \code{formulaEnv} and \code{formulaTraits} should
contain variable names as is, \emph{i.e.} transformations of variables in the formulas gives
an error ('undefined columns selected') when the \code{\link{scores}} function is applied.
}
\examples{

data("dune_trait_env")
# rownames are carried forward in results
rownames(dune_trait_env$comm) <- dune_trait_env$comm$Sites
mod <- dc_CA_vegan(formulaEnv = ~A1+Moist+Mag+Use+Manure,
                   formulaTraits = ~. ,
                   response = dune_trait_env$comm[, -1],  # must delete "Sites"
                   dataEnv =dune_trait_env$envir,
# delete "Species", "Species_abbr" from traits and
# use all remaining variables due to formulaTraits = ~. (the default)
                   dataTraits =dune_trait_env$traits[,-c(1,2)],
                   verbose = TRUE)
class(mod)
print(mod)
set.seed(123)
# overall test
# community-level permutation test
anova(mod$RDAonEnv) # all options of anova.cca are available!
# by axis test
p_sites   <- anova(mod$RDAonEnv, by = "axis")
# a species-level permutation test required an dedicated new function
# anova_species(mod) # see dune_test.r

mod_scores <- scores(mod, display = c("all"), scaling = "sym")


(meaning <- lapply(mod_scores, function(x)attr(x,which = "meaning")))

head(mod_scores$sites)
attr(mod_scores$sites, which = "meaning")
mod_scores$regression
mod_scores$biplot
mod_scores$centroids
# species related scores
head(mod_scores$species)
attr(mod_scores$species, which = "meaning")
mod_scores$regression_traits
mod_scores$biplot_traits
mod_scores$centroids_traits


mod_scores_tidy <- scores(mod, display = "all", tidy = TRUE)
names(mod_scores_tidy)
levels(mod_scores_tidy$score)


# for illustration: a dc-CA model with a trait covariate
mod2 <- dc_CA_vegan(formulaEnv = ~A1+Moist+Mag+Use+Manure,
                   formulaTraits = ~ SLA+Height+ LDMC+ Lifespan +Condition(Seedmass) ,
                   response = dune_trait_env$comm[, -1],  # must delete "Sites"
                   dataEnv =dune_trait_env$envir,
                   dataTraits =dune_trait_env$traits,
                   verbose = TRUE)

# for illustration: a dc-CA model with both environmental and trait covariates
mod3 <- dc_CA_vegan(formulaEnv = ~A1+Moist+Use+Manure+Condition(Mag),
                    formulaTraits = ~ SLA+Height+LDMC+Lifespan +Condition(Seedmass) ,
                    response = dune_trait_env$comm[, -1],  # must delete "Sites"
                    dataEnv =dune_trait_env$envir,
                    dataTraits =dune_trait_env$traits,
                    verbose = TRUE)

# for illustration: same model but using mod2 for speed, as the trait model and data did not change
mod3B <- dc_CA_vegan(formulaEnv = ~A1+Moist+Use+Manure+Condition(Mag),
                    dataEnv =dune_trait_env$envir,
                    dc_CA_vegan_object = mod2,
                    verbose = TRUE)
all.equal(mod3,mod3B) # TRUE

mod_scores <- scores(mod3, display = "all", scaling = "symmetric")
str(mod_scores)


head(mod_scores$sites)
attr(mod_scores$sites, which = "meaning")
mod_scores$regression

mod_scores[["biplot"]]
#  mod_scores$centroids
# #gives the mod_scores$centroids_traits
# as mod_scores[["centroids"]] is NULL
mod_scores[["centroids"]]
# species related scores
head(mod_scores$species)
attr(mod_scores$species, which = "meaning")
mod_scores$regression_traits
mod_scores$biplot_traits
mod_scores$centroids_traits



mod_scores <- scores(mod3, display = "all", tidy = TRUE)
names(mod_scores)
levels(mod_scores$score)
str(mod_scores)




# All statistics and scores have been checked against the results
# in Canoco 5.15 (ter Braak & Smilauer, 1918) for all three types of scaling.

}
\references{
ter Braak, CJF, Šmilauer P, and Dray S. 2018. Algorithms and biplots for
double constrained correspondence analysis.
Environmental and Ecological Statistics, 25(2), 171-197.
https://doi.org/10.1007/s10651-017-0395-x or
http://rdcu.be/ETPh

ter Braak C.J.F. and  P. Šmilauer  (2018). Canoco reference manual
and user's guide: software for ordination (version 5.1x).
Microcomputer Power, Ithaca, USA, 536 pp.

Oksanen, J., et al. (2022)
vegan: Community Ecology Package. R package version 2.6-4.
http://CRAN.R-project.org/package=vegan.
}
\seealso{
\code{\link{plot_dcCA}}, \code{\link{scores.dccav}}, \code{\link{print.dccav}} and \code{\link{anova.dccav}}
}
