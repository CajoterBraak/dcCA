% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_species_scores_bk.r
\name{plot_species_scores_bk}
\alias{plot_species_scores_bk}
\title{Vertical ggplot2 line plot of ordination scores}
\usage{
plot_species_scores_bk(
  species_scores,
  ylab = "scores",
  threshold = 7,
  y_lab_interval = 0.5,
  speciesname = NULL,
  scoresname = "RDA1",
  selectname = "Fratio1",
  expand = 0.2,
  verbose = TRUE
)
}
\arguments{
\item{species_scores}{a species-by-scores matrix, a data frame with rownames (species names) or a tibble
 with variable with name \code{speciesname} containing species names and
 a column or variabe with name \code{scoresname} containing the scores
(default: \code{"RDA1"}), e.g. species scores from library \code{vegan}}

\item{ylab}{y-axis label. Default: $b_k$.}

\item{threshold}{species with criterion (specified by \code{selectname}) higher than the \code{threshold} are displayed.
Default: 7
(which is the threshold F-ratio for testing a single regression coefficient
at \code{p=0.01} with \code{60} df for the error in a multiple regression
of each single species onto the condition and the ordination axis).
If \code{selectname} is not in \code{species_scores}, the \code{threshold} is divided by \code{14}, so that the default is 0.5.}

\item{y_lab_interval}{interval of the y-axis ticks. A tick at no effect (0) is always included; default: 0.5.}

\item{speciesname}{name of the variable containing the species names (default \code{NULL} uses rownames)}

\item{scoresname}{name of the column or variable containing the species scores to be plotted (default \code{"RDA1"})}

\item{selectname}{name of the column or variable containing the criterion for the selection of species to be displayed
Default: \code{"Fratio1"}; if \code{selectname} is not found in \code{species_scores}, set to \code{scoresname}.}

\item{expand}{amount of extension of the line plot (default 0.2)}

\item{verbose}{logical for printing the number of species with names out of the total number (default: \code{TRUE}).}
}
\value{
a ggplot object
}
\description{
\code{plot_species_scores_bk} creates a vertical line plot of ordination scores with selection criterion
 for which scores to plot with names.
}
\details{
The absolute value of the criterion values is taken before selection,
so that also the species scores of the ordination can serve as a criterion (e.g. \code{selectname="RDA1"}).
The function has been copied from the \code{PRC} package at https://github.com/CajoterBraak/PRC.
}
\examples{
data("dune_trait_env")
# rownames are carried forward in results
rownames(dune_trait_env$comm) <- dune_trait_env$comm$Sites
# must delete "Sites" from response matrix or data frame
Y <- dune_trait_env$comm[,-1] # must delete "Sites"

out <- dc_CA_vegan(formulaEnv = ~A1+Moist+Mag+Use+Manure,
                   formulaTraits = ~ SLA + Height + LDMC + Seedmass + Lifespan ,
                   response = Y,
                   dataEnv =dune_trait_env$envir,
                   dataTraits =dune_trait_env$traits
                   )
out <- print(out) # more efficient for  scores() than just 'print(out)'

mod_scores <- scores(out, display = "all")
names(mod_scores)
#str(mod_scores)
axis <- 1
stats <- c(community= "cor", species = "cor") # "weights
if (length(stats)==1)stats <- c(stats,stats)


# community level plot ----------------------------------------------------

if (stats[1] == "weights"){
  trait_scores <- mod_scores$regression_traits
  ylab_traits <-  "Weight in composite trait"
  offset  <- 3
} else {
  trait_scores <- mod_scores$correlation_traits
  ylab_traits <- "cor(trait, SNC)"
  offset <- 0
}

#smoothing_method <- c(sites = "lm",species = "gam")
#if (length(smoothing_method)==1)smoothing_method <- c(smoothing_method,smoothing_method)

dat <- out$data$dataEnv
dat$composite_env <- mod_scores$constraints_sites[,axis]
dat$CWM_composite_trait <- mod_scores$sites[,axis]

#site_groups<- PRC::get_focal_and_conditioning_factors(out$RDAonEnv)$condition # site groups
site_groups<- NULL  # no site groups
if (!is.null(site_groups)) dat$site_groups <- dat[[site_groups]]

library(ggplot2)
if (is.null(site_groups))   p <- ggplot(data=  dat, aes(x = composite_env, y= CWM_composite_trait)) else
  p <- ggplot(data=  dat, aes(x = composite_env, y= CWM_composite_trait, group = .data[[site_groups]], color= .data[[site_groups]]))
p_env <- p + geom_point() + geom_smooth(method = lm) + xlab("environmental gradient")
# or to show that PB has no relevance
#pp <- p + geom_point() + geom_smooth()
#pp


plot_traits <- plot_species_scores_bk(
  species_scores= trait_scores,
  ylab = ylab_traits,
  threshold = 0,
  y_lab_interval = 0.2,
  speciesname = NULL,
  scoresname = colnames(trait_scores)[offset+ axis],
  selectname = "Fratio1",
  verbose = TRUE
)

# species-level plot ------------------------------------------------------

if (stats[2]=="weights"){
  env_scores <- mod_scores$regression
  ylab_env <-  "Weight in gradient"
  offset <- 3
} else {
  env_scores <- mod_scores$correlation
  ylab_env <- "cor(env, CWM)"
  offset <- 0
}


dat <- out$data$dataTraits
dat$composite_trait <- mod_scores$constraints_species[,axis]
dat$SNC_composite_env <- mod_scores$species[,axis]
dat$`rel.abundance` <- out$CCAonTraits$rowsum

#fc<- PRC::get_focal_and_conditioning_factors(out$RDAonEnv)
species_groups <- NULL # species groups
if(!is.null(species_groups)) dat$species_groups <- species_groups

library(ggplot2)
if (is.null( species_groups))   p <- ggplot(data=  dat, aes(x = composite_trait, y= SNC_composite_env )) else
  p <- ggplot(data=  dat, aes(x = composite_trait, y= SNC_composite_env, group = species_groups, color= species_groups, size=tot_abun))
#p_traits <- p + geom_point() + stat_smooth(method = lm) + xlab("trait composite") + ylab("SNC along gradient")

p_traits <- p + geom_point(aes( size  = `rel.abundance`)) +
  stat_smooth(aes(weight = `rel.abundance`),method = "lm") +
   theme(legend.position = c(0.1,0.75)) +
  xlab("trait composite") + ylab("SNC along gradient")

#p_traits
#suppressWarnings(print(p_traits))

plot_env <- plot_species_scores_bk(
  species_scores= env_scores,
  ylab = ylab_env,
  threshold = 0,
  y_lab_interval = 0.2,
  speciesname = NULL,
  scoresname = colnames(env_scores)[offset+ axis],
  selectname = "Fratio1",
  verbose = TRUE
)

# modifying the plot
#gg <- plotPRC(mod_prc, plot = "ditch",width = c(4,1), verbose = FALSE)
#p1 <- gg$separateplots$treatments + ggplot2::ggtitle(paste("new title:", latex2exp::TeX("$c_{dt}$")))   # PRC plot of samples (c_dt)
#p2 <- gg$separateplots$species    + ggplot2::ylab("new title: loadings")# loadings of species  (b_k)
# Assign these plots to symbols and use grid.arrange to produce the plot  you like, for example:

# plot arrange ------------------------------------------------------------


if (stats[1]=="weights"){
gridExtra::grid.arrange(p_env+ ylab("CWM of composite trait"),
                        plot_traits, ncol =2, widths = c(4,1),
                        top = "Community level of double constrained correspondence analysis",
                        left ="", right =  "")
suppressWarnings( print(gridExtra::grid.arrange(p_traits,
                        plot_env, ncol =2, widths = c(4,1),
                        top = "Species level of double constrained correspondence analysis",
                        left ="", right =  "")))

} else {
  gridExtra::grid.arrange(p_env+ ylab("CWM of composite trait"),
                          plot_env, ncol =2, widths = c(4,1),
                          top = "Community level of double constrained correspondence analysis",
                          left ="", right =  "")
  suppressWarnings( print(gridExtra::grid.arrange(p_traits,
                                                  plot_traits, ncol =2, widths = c(4,1),
                                                  top = "Species level of double constrained correspondence analysis",
                                                  left ="", right =  "")))

}






}
