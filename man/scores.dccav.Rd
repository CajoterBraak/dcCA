% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scores.dccav.R
\name{scores.dccav}
\alias{scores.dccav}
\title{Extract results of a vegan-based double constrained correspondence Analysis (dc-CA)}
\usage{
\method{scores}{dccav}(
  x,
  choices = c(1, 2),
  display = c("all"),
  scaling = "sym",
  which_cor = "in model",
  tidy = FALSE,
  ...
)
}
\arguments{
\item{x}{object}

\item{choices}{integer vector of which axes to obtain. Default: all dc-CA axes.}

\item{display}{a character vector, one or more of
\code{c("all","species","sites","sp", "wa", "lc","bp", "cor", "reg", "cn",
"lc_traits", "reg_traits", "cor_traits","bp_traits","cn_traits")}.
The first ten are as in \code{\link[vegan]{scores.cca}} (except \code{"cor"})
and remaining ones are similar scores for traits.}

\item{scaling}{numeric (1,2 or 3) or character \code{"sites", "species" or "symmetric"}. Default: "sym".
Either site- (1) or species- (2) related scores are scaled by eigenvalues,
and the other set of scores is left unscaled,
or with 3 both are scaled symmetrically by square root of eigenvalues. Negative values are treated as the
corresponding positive ones by \code{abs(scaling)}. See also}

\item{which_cor}{character or list of trait and environmental variables names (in this order)
in the data frames for which inter-set correlations must calculated.
Default: a character ("in_model") for all traits and variables in the model,
including collinear variables and levels.}

\item{tidy}{Return scores that are compatible with \code{ggplot2}:
all scores are in a single data.frame, score type is identified by factor variable \code{score},
the names by variable \code{label}, and species weights (in dc_CA_vegan) are in variable \code{weight}.
See \code{\link[vegan]{scores.cca}}.}

\item{...}{Other arguments passed to the function (currently ignored).}
}
\value{
A data frame if \code{tidy = TRUE}, a matrix if a single item is asked for and a named list of matrices if more than one item
is asked for. The following names can be included: \code{c("sites",
"constraints_sites", "centroids", "regression", "correlation", "biplot",
"species", "constraints_species", "regression_traits", "correlation_traits",
"biplot_traits", "centroids_traits")}. Each matrix has an attritute \code{"meaning"} explaining its content.
}
\description{
This function works very much like the \code{vegan} \code{\link[vegan]{scores}} function,
in particular \code{\link[vegan]{scores.cca}}, with the additional results such
as regression coefficients and linear combinations of traits \code{('regr_traits','lc_traits')}
In the current version, there is a single scaling (\code{scaling = "sites"}).
All scores from CA obey the so called transition formulas and so do the scores of CCA and dc-CA.
The differences are, for CCA, that the linear combinations of environmental variables
(the \emph{constrained} site scores)
replace the usual (\emph{unconstrained}) site scores, and for dc-CA,
that the linear combinations of traits (the \emph{constrained} species scores)
also replace the usual (\emph{unconstrained}) species scores.
}
\details{
An example of which_cor is: \code{which_cor = list(traits= c("SLA"), env = c("acidity","humidity") )}
 The function is modeled after \code{\link[vegan]{scores.cca}}.
}
\examples{

data("dune_trait_env")
# rownames are carried forward in results
rownames(dune_trait_env$comm) <- dune_trait_env$comm$Sites
mod <- dc_CA_vegan(formulaEnv = ~A1+Moist+Mag+Use+Manure,
                   formulaTraits = ~. ,
                   response = dune_trait_env$comm[, -1],  # must delete "Sites"
                   dataEnv =dune_trait_env$envir,
# delete "Species", "Species_abbr" from traits and
# use all remaining variables due to formulaTraits = ~. (the default)
                   dataTraits =dune_trait_env$traits[,-c(1,2)],
                   verbose = TRUE)

set.seed(123)
# overall test
# community-level permutation test
anova(mod$RDAonEnv) # all options of anova.cca are available!
# by axis test
p_sites   <- anova(mod$RDAonEnv, by = "axis")
# a species-level permutation test required an dedicated new function
# anova_species(mod) # see dune_test.r

mod_scores <- vegan::scores(mod, display = c("all"), scaling = "sites")

names(mod_scores)
str(mod_scores)
head(mod_scores$sites)
attr(mod_scores$sites, which = "meaning")
mod_scores$regression
mod_scores$biplot
mod_scores$centroids
# species related scores
head(mod_scores$species)
attr(mod_scores$species, which = "meaning")
mod_scores$regression_traits
mod_scores$biplot_traits
mod_scores$centroids_traits


mod_scores <- scores(mod, display = "all", tidy = TRUE)
names(mod_scores)
levels(mod_scores$score)


# for illustration: a dc-CA model with a trait covariate
mod2 <- dc_CA_vegan(formulaEnv = ~A1+Moist+Mag+Use+Manure,
                   formulaTraits = ~ SLA+Height+ LDMC+ Lifespan +Condition(Seedmass) ,
                   response = dune_trait_env$comm[, -1],  # must delete "Sites"
                   dataEnv =dune_trait_env$envir,
                   dataTraits =dune_trait_env$traits,
                   verbose = TRUE)

# for illustration: a dc-CA model with both environmental and trait covariates
mod3 <- dc_CA_vegan(formulaEnv = ~A1+Moist+Use+Manure+Condition(Mag),
                    formulaTraits = ~ SLA+Height+LDMC+Lifespan +Condition(Seedmass) ,
                    response = dune_trait_env$comm[, -1],  # must delete "Sites"
                    dataEnv =dune_trait_env$envir,
                    dataTraits =dune_trait_env$traits,
                    verbose = TRUE)

# for illustration: same model but using mod2 for speed, as the trait model and data did not change
mod3B <- dc_CA_vegan(formulaEnv = ~A1+Moist+Use+Manure+Condition(Mag),
                    dataEnv =dune_trait_env$envir,
                    dc_CA_vegan_object = mod2,
                    verbose = TRUE)
all.equal(mod3,mod3B) # TRUE

mod_scores <- scores(mod3, display = "all", scaling = "symmetric")
str(mod_scores)


head(mod_scores$sites)
attr(mod_scores$sites, which = "meaning")
mod_scores$regression

mod_scores[["biplot"]]
#  mod_scores$centroids
# #gives the mod_scores$centroids_traits
# as mod_scores[["centroids"]] is NULL
mod_scores[["centroids"]]
# species related scores
head(mod_scores$species)
attr(mod_scores$species, which = "meaning")
mod_scores$regression_traits
mod_scores$biplot_traits
mod_scores$centroids_traits



mod_scores <- scores(mod3, display = "all", tidy = TRUE)
names(mod_scores)
levels(mod_scores$score)
str(mod_scores)




# All statistics and scores have been checked against the results
# in Canoco 5.15 (ter Braak & Smilauer, 1918) for all three types of scaling.

}
